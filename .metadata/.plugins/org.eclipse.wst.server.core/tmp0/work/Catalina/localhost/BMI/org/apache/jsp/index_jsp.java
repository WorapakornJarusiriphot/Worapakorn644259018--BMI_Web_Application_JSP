/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.23
 * Generated at: 2566-08-18 20:29:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.bmi.HumanBeing;
import com.bmi.BmiIndexer;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.bmi.BmiIndexer");
    _jspx_imports_classes.add("com.bmi.HumanBeing");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    String interpretation = null;
	String interpretimagePathBMI = null;
	String interpretdetailsBMI = null;
    double bmi = 0;

    if ("POST".equalsIgnoreCase(request.getMethod())) {
        double weight = Double.parseDouble(request.getParameter("weight"));
        double height = Double.parseDouble(request.getParameter("height"));

        HumanBeing human = new HumanBeing();
        human.setWeight(weight);
        human.setHeight(height);
        human.calculateBmi();

        BmiIndexer bmiIndexer = new BmiIndexer();
        bmiIndexer.setHuman(human);
        bmi = bmiIndexer.getBmi();
        interpretimagePathBMI = bmiIndexer.interpretimagePathBMI();
        interpretation = bmiIndexer.interpretBMI();
        interpretdetailsBMI = bmiIndexer.interpretdetailsBMI();
    }

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <title>BMI Calculator</title>\r\n");
      out.write("    <!-- Add Bootstrap CSS -->\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\">\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            background-image: url(\"images/bmi background.jpg\");\r\n");
      out.write("            background-repeat: no-repeat;\r\n");
      out.write("            background-size: cover;\r\n");
      out.write("            color: white;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .card {\r\n");
      out.write("            border-radius: 20px;\r\n");
      out.write("            border: none;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn {\r\n");
      out.write("            border-radius: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn {\r\n");
      out.write("            transition: transform .2s;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn:hover {\r\n");
      out.write("            transform: scale(1.1);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        @keyframes animateBackground {\r\n");
      out.write("            0% {\r\n");
      out.write("                background-position: 0 0;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            100% {\r\n");
      out.write("                background-position: 100% 0;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        body {\r\n");
      out.write("            background-image: url(\"images/bmi background.jpg\");\r\n");
      out.write("            animation: animateBackground 10s linear infinite;\r\n");
      out.write("            background-size: 200% 200%;\r\n");
      out.write("            color: white;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .fade-in {\r\n");
      out.write("            opacity: 0;\r\n");
      out.write("            transition: opacity 0.5s;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("\r\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"></script>\r\n");
      out.write("    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"></script>\r\n");
      out.write("    \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
 if (interpretation != null) { 
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div class='container py-5'>\r\n");
      out.write("		<div class='row justify-content-center'>\r\n");
      out.write("			<div class='col-lg-6'>\r\n");
      out.write("				<div class='card shadow bg-dark'>\r\n");
      out.write("					<div class='card-body'>\r\n");
      out.write("						<h2 class='text-center mb-4'>ผลลัพธ์</h2>\r\n");
      out.write("						<p class='text-center'>\r\n");
      out.write("							<strong>ค่า BMI ของคุณคือ:</strong>\r\n");
      out.write("							");
      out.print( bmi );
      out.write("</p>\r\n");
      out.write("						<p class='text-center'>\r\n");
      out.write("							<strong>");
      out.print( interpretation );
      out.write("</strong>\r\n");
      out.write("						</p>\r\n");
      out.write("						<div class='text-center'>\r\n");
      out.write("							<img src='");
      out.print( interpretimagePathBMI );
      out.write("' alt='BMI Image'\r\n");
      out.write("								class='img-fluid rounded mx-auto d-block' />\r\n");
      out.write("						</div>\r\n");
      out.write("						<div class='details'>\r\n");
      out.write("							<h3>ข้อแนะนำ:</h3>\r\n");
      out.write("							<ul>\r\n");
      out.write("								");
      out.print( interpretdetailsBMI );
      out.write("\r\n");
      out.write("							</ul>\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<!-- Debugging Output -->\r\n");
      out.write("	<!-- ");
      out.print( "Request method: " + request.getMethod() );
      out.write('\r');
      out.write('\n');
      out.print( "Weight parameter: " + request.getParameter("weight") );
      out.write('\r');
      out.write('\n');
      out.print( "Height parameter: " + request.getParameter("height") );
      out.write(" -->\r\n");
      out.write("	<!-- [Your main content here] -->\r\n");
      out.write("	<div class=\"container py-5\">\r\n");
      out.write("		<div class=\"row justify-content-center\">\r\n");
      out.write("			<div class=\"col-lg-6\">\r\n");
      out.write("				<div class=\"card shadow bg-dark\">\r\n");
      out.write("					<div class=\"card-body\">\r\n");
      out.write("						<h1 class=\"text-center mb-4\">BMI Calculator</h1>\r\n");
      out.write("						<form method=\"post\" action=\"\">\r\n");
      out.write("							<div class=\"form-group\">\r\n");
      out.write("								<label for=\"weight\">Weight (kg):</label> <input type=\"text\"\r\n");
      out.write("									class=\"form-control\" name=\"weight\" id=\"weight\" required>\r\n");
      out.write("							</div>\r\n");
      out.write("							<div class=\"form-group\">\r\n");
      out.write("								<label for=\"height\">Height (cm):</label> <input type=\"text\"\r\n");
      out.write("									class=\"form-control\" name=\"height\" id=\"height\" required>\r\n");
      out.write("							</div>\r\n");
      out.write("							<button type=\"submit\" class=\"btn btn-success btn-block\">Calculate\r\n");
      out.write("								BMI</button>\r\n");
      out.write("						</form>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
